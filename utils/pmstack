#!/bin/bash

# PMStack or PanoMagickStack - Rowland Cheshire June 2016
# cheshire_r@fastmail.fm

# Align and stack a set of calibrated debayered tiff files (change the extension to suit)
# GPLv3 - distribute as desired - not for commercial use - attribution rights.

# Requires Panotools and ImageMagick

# Acknowledgements
# Ivo Jaeger (http://siliconfields.net)
# dcraw: (http://www.cybercom.net/~dcoffin/)
# ImageMagick: (http://www.imagemagick.org/script/index.php)
# Panotools: (http://panotools.sourceforge.net/)
# Hugin: (http://hugin.sourceforge.net/)
# Macrofusion: (https://sourceforge.net/projects/macrofusion/)
# Fred's ImageMagick scripts: (http://www.fmwconcepts.com)
# Demosaic / DeBayer: (http://www.ipol.im/pub/art/2011/g_mhcd/)

# location of Asterism source files

# get path to pmstack
	MYPATH="`dirname \"$0\"`"           	# relative
	MYPATH="`( cd \"$MYPATH\" && pwd )`"  	# absolutized and normalized
	if [ -z "$MYPATH" ] ; then
# error; for some reason, the path is not accessible
# to the script (e.g. permissions re-evaled after suid)
  	exit 1  # fail
fi

# location of source files
	if [ -e $MYPATH/asterism ]; then
	source=$(readlink -f $MYPATH); else
	source=$(pwd)
	fi

# no at bridge
	export NO_AT_BRIDGE=1

# title
	title='PMStack'

# location of yad window icon
	if [ -e $MYPATH/AsterismLOGOs.png ]; then
	wicon=$(readlink -f $MYPATH/AsterismLOGOs.png)
	fi

# file type function
	function fileType () 
	{
	files=$(basename -a *.*)
	ext="${files##*.}"
	}

# create directory (if needed) helper function
	function createDirIfNeeded ()
	{
	if [ -d $1 ]
	then
		echo " " >/dev/null 2>&1
	else
		echo "		Creating $1 folder"
	mkdir $1
	fi
	}

# yad progress function
	function yadProgress ()
	{
	yad --progress --center \
  		--title="$title - $name" \
		--progress-text="$text" \
		--window-icon=$wicon \
		--width=300 \
		--pulsate \
		--no-buttons \
  		--auto-close \
  		--auto-kill 2>/dev/null
	}

# yad error function
	function yadError ()
	{
	(( $? != 0 )) && yad --error --text="Error in yad command"
	}

# mean stack function
	function meanStack () 
	{
	convert *.tif -depth $depth -evaluate max $clipmax% -evaluate min $clipmin% -evaluate-sequence mean pmstack_$name.tif >/dev/null 2>&1
	}

# killall function
	function killAll ()
	{
	killall pmstack awk
	}

# yad notebook plug key
	key=$RANDOM

# location of pmstack log
	log=~/.asterism/pmstack_log

# PMStack tab
	yad --plug=$key --tabnum=1 --form --separator=':' --columns=1 \
		--text="<b>Align and Stack</b> " \
		--field="Stack only":CHK \
			'TRUE!FALSE' \
		--field="<b>Log file*</b>":FL \
			"-" \
		--field="Input Format":RO \
			'tiff' \
		--field="RANSAC Iterations" \
			'200' \
		--field="Align":CB \
			'LINEAR!MULTI!ALL PAIRS' \
		--field='Stack':CB \
			'POLY!MEAN!MEDIAN!ENFUSE!HDR' \
		--field="Noise - radius":NUM \
			'0!0..30!1!0' \
		--field="Noise - amount":NUM \
			'0!0..5!0.1!1' \
		--field="QRMax":NUM \
			'0!0..10!0.000001!6' \
		--field="QRMin":NUM \
			'100!0..100!0.000001!6' \
		--field="Mask":CB \
			'NONE!SOFT!HARD' \
		--field="HFOV" \
			'8' \
		--field="Cache" \
			'4096' > $log | &> res1 &

# run main notebook dialog
	yad --notebook --key=$key --center --tab="<b>PMStack</b>" \
		--text="<span foreground='grey'><b><big>PMStack - Develop</big></b></span>" \
    		--title="Asterism" \
		--window-icon=$wicon \
		--image=$wicon \
		--image-on-top \
		--button=Quit:1 \
		--button=Process:0  2>/dev/null
	
# run quit pmstack
	if [[ $? = 1 || $? = 252 ]]; then
	exit 1; else
	echo " " >/dev/null 2>&1
	fi
	
	{ IFS=":" read noalign pmlog ext ransac cpoint stack radius spread clipmax clipmin mask hfov cache; } < $log

	echo $pmlog $noalign $ext $ransac $cpoint $stack $radius $spread $clipmax $clipmin $mask $hfov $cache

	if [ "$despeck" != "TRUE" ]; then
	despeck=""; else
	despeck=-despeckle
	fi

# print project name
	if [ -e "$image" ]; then
	echo " " >/dev/null 2>&1; else

	directory=$(awk 'BEGIN { FS = ":" } ; { print $1 }' $pmlog)
	format=$(awk 'BEGIN { FS = ":" } ; { print $3 }' $pmlog)

	name=$(basename $directory)

	echo "		Name $name"

	imagedir=$directory/debayer_$name

	aligndir=$imagedir/align_$name
	
	processdir=$directory/process_$name

	llrgbdir=$directory/llrgb_$name

# check for image directory
	if [[ -e "$imagedir" || -e "$processdir" ]]; then
	echo " " >/dev/null 2>&1; else

	yad --info --width=430 --window-icon=$wicon --title="PMStack $name" \
	--text="You have selected log_$name but debayer_$name and process_$name do not exist.

The $name project is not complete.

Please return to Asterism" \
	--button="Return to Asterism":1
	fi
fi

	cd $imagedir

# run quit pmstack
	if [[ $? = 1 || $? = 252 ]]; then
	exit 1; else
	echo " " >/dev/null 2>&1
	fi

# despeckle
	if [ "$despeckle" != "TRUE" ]; then
	despeckle=""; else
	despeckle=-despeckle
	fi

# remove previous pmstack log file
	if [ -e "$image" ];then
	echo " " >/dev/null 2>&1; else
	if [ ! -e $log ]; then
	echo " " >/dev/null 2>&1; else
	rm -f $log
	fi

# remove old pto files
	if [ ! -e *.pto ]; then
	echo " " >/dev/null 2>&1; else
	rm -f *pto
	fi

# remove previous aligned tif files

	if [ "$noalign" = "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	rm -f *.tif
	fi

# remove previous min and max.tiff files

	if [ ! -e min.tiff ]; then
	echo " " >/dev/null 2>&1; else
	rm -f min.tiff max.tiff
	fi

# convert deBayered input files (jpeg png fits) to 16 bit tiff

	fileType

	if [ "$ext" = "tiff" ]; then
	echo " " >/dev/null 2>&1; else
	convert *.$ext -depth $depth +compress %d.tiff
	fi

# alignment control point variable
	if [ "$cpoint" = "LINEAR" ]; then
	CPOINT=--linearmatch; else
	if [ "$cpoint" = "MULTI" ]; then
	CPOINT=--multirow; else
	if [ "$cpoint" = "ALL PAIRS" ]; then
	CPOINT=""; else	
	echo " " >/dev/null 2>&1
		fi
	fi
fi

# enfuse mask variables
	if [ "$mask" = "NONE" ]; then
	MASK=""; else
	if [ "$mask" = "SOFT" ]; then
	MASK=--soft-mask; else
	if [ "$mask" = "HARD" ]; then
	MASK=--hard-mask; else	
	echo " " >/dev/null 2>&1
		fi
	fi
fi
	
	if [ "$noalign" = "TRUE" ]; then
	echo " " >/dev/null 2>&1; else

	text=$(echo "Image Alignment")

	echo	"Align images"
	(
	pto_gen -p 0 -f $hfov -o $name.pto *.$ext

	cpfind $CPOINT --ransacmode auto --ransaciter $ransac -o $name.pto $name.pto

	cpclean -o $name.pto $name.pto

	autooptimiser -a -m -s -o $name.pto $name.pto

	pano_modify -o $name.pto -p 0 --fov=auto --output-type=REMAPORIG,FUSEDSTACKS --output-exposure=0 --ldr-compression=NONE --ldr-file=TIF --blender=INTERNAL --canvas=AUTO --crop=AUTOHDR $name.pto

	nona -r ldr -p UINT16 -z NONE -m TIFF_m -o $name $name.pto 
	) | 
	yadProgress	
	yadError

	rm $name.pto

	createDirIfNeeded $aligndir

	mv -f *.tif $aligndir
fi

# check for align directory
	if [ -d "$aligndir" ]; then
	echo " " >/dev/null 2>&1; else
	aligndir=$processdir
	fi

	if [ -d "$aligndir" ]; then
	echo " " >/dev/null 2>&1; else
	
yad --info center --width=300 --window-icon=$wicon --title="$title - PMStack $name" --text="Align directory does not exist - no images have been aligned" --button=Leave:1 2>/dev/null

# Leave PMStack

	text=$(echo "Leave PMStack")

	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=2 2>/dev/null

	echo "		Leave PMStack"

	killAll
exit

fi

# stack images - poly - mean - median - exposure fusion
	cd $aligndir

	echo "		Stack images"

	if [ "$stack" = "POLY" ]; then
	echo "		Polynomial stack"
	text=$(echo "Polynomial stack")
	(
	echo ""

# number of files in folder

	f=$(find . -maxdepth 1 -type f | wc -l)

# poly weight image set
	w=$(echo "scale=6; 1/$f" | bc)

# poly weight variables
	str0="$w,1,"
	str1="-$w,1,"
	str2="-$w,1"

# print $str0 $f times
	wstr=$(for i in $(seq 1 $f); do printf "$str0"; done)

# compute image set min and max
	convert *.tif \( -clone 0--1 -evaluate-sequence Min +write min.tiff +delete \) -evaluate-sequence Max max.tiff

	polystack=$(printf "convert *.tif min.tiff max.tiff -auto-level -poly ""$wstr""$str1""$str2"" -alpha off pmstack_$name.tif")

	$polystack

	rm min.tiff max.tiff
	) |
	yadProgress	
	yadError

	else
	
	if [ "$stack" = "MEAN" ]; then
	echo "		Mean stack"
	text=$(echo "Mean - average stack")
	(
	echo ""
	meanStack
	) |
	yadProgress	
	yadError
	
	else
	
	if [ "$stack" = "MEDIAN" ]; then
	echo "		Median stack"
	text=$(echo "Median Stack")
	(
	echo ""
	convert *.tif -depth $depth -evaluate-sequence median pmstack_$name.tif >/dev/null 2>&1
	meanStack
	) |
	yadProgress	
	yadError
	
	else
	
	if [ "$stack" = "ENFUSE" ]; then
	echo "		Exposure fusion stack"
	text=$(echo "Exposure fusion stack")
	(
	echo ""
	enfuse *.tif -m $cache -l auto -d 16 --exposure-weight=0 $MASK -o pmstack_$name.tif
	meanStack
	) |
	yadProgress	
	yadError

	else

	echo " " >/dev/null 2>&1
			fi
		fi
	fi
fi

# mean shift noise reduction
	if [ "$radius" = "0.000000" ] && [ "$spread" = "0.000000" ]; then
	echo " " >/dev/null 2>&1; else

	text=$(echo "Noise reduction")

	echo "		Noise reduction"
	(
	echo ""

	convert pmstack_$name.tif -depth $depth -colorspace YCbCR -mean-shift "$radius"x"$radius"+"$spread"% -colorspace sRGB +compress -alpha off pmstack_$name.tif
	) |
	yadProgress
	yadError
	fi
fi

# display stack

	if [ ! -e "pmstack_$name.tif" ]; then
	echo " " >/dev/null 2>&1; else
	display -alpha off pmstack_$name.tif
	fi

yad --question --width=300 --window-icon=$wicon --title="$title - Stack $name" --text="Stack result OK" --button=No:1 --button=Yes:0 2>/dev/null

	if [ $? = 0 ]; then
	echo " " >/dev/null 2>&1; else

yad --info --width=300 --window-icon=$wicon --title="$title - Stack $name" --text="Run PMStack with different parameters" --button="OK" 2>/dev/null

# Leave PMStack

	text=$(echo "Leave PMStack")

	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	echo "		Leave PMStack"
	
	killAll
exit

fi

# convert output format
	if [ ! -e "pmstack_$name.tif" ]; then
	echo " " >/dev/null 2>&1; else
	mv pmstack_$name.tif $directory/pmstack_$name.$format
	fi	

# extract luminance - combine with image stack - delete copy

yad --question --width=300 --window-icon=$wicon --title="$title - Create LRGB L* $name" --text="Create LRGB frames and lightness mask" --button=No:1 --button=Yes:0 2>/dev/null

	if [ $? = 1 ]; then
	echo " " >/dev/null 2>&1; else
	createDirIfNeeded $llrgbdir
	text=$(echo "Creating LRGB frames and L* mask")
	echo "		Creating LRGB frames and L* mask"	
	(
	echo ""

	cd $llrgbdir

	convert $directory/pmstack_$name.tif -depth $depth +compress -separate +channel %d.miff

	convert 0.miff -depth $depth R_$name.$format
	convert 1.miff -depth $depth G_$name.$format
	convert 2.miff -depth $depth B_$name.$format

	convert $directory/pmstack_$name.tif \( -clone 0 -depth $depth -colorspace LAB -separate -channel L +write Lab.miff +delete \) \
	-depth $depth -alpha off -colorspace Gray Lrgb.miff

	convert Lrgb.miff -depth $depth L_$name.$format

	convert Lab.miff -depth $depth MASK_$name.$format

	rm -f *.miff
	) |
	yadProgress	
	yadError
fi

# Leave PMStack
	rm -f $source/res*

	text=$(echo "Leave PMStack")

	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	echo "		Leave PMStack"
	killAll

exit
