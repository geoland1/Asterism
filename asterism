#!/bin/bash
#ifs.sh

# Acknowledgements
# Ivo Jaeger (http://siliconfields.net)
# dcraw: (http://www.cybercom.net/~dcoffin/)
# Demosaic / DeBayer: (http://www.ipol.im/pub/art/2011/g_mhcd/)
# ImageMagick: (http://www.imagemagick.org/script/index.php)
# Panotools: (http://panotools.sourceforge.net/)
# Hugin: (http://hugin.sourceforge.net/)
# Macrofusion: (https://sourceforge.net/projects/macrofusion/)
# Fred's ImageMagick scripts: (http://www.fmwconcepts.com)
# Linux / xubuntu: (https://xubuntu.org/) 

# Asterism - An astronomical exposure reduction image stacking method - for consumer digital cameras 
#   Copyright (C) 2015 - 2017 Rowland Cheshire

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>

# location of Asterism source files - negotiate Desktop link to /home/Asterism

	if [ -e /usr/local/bin/asterism ]; then
	source=$(readlink -f /usr/local/bin); else
	source=$(pwd)
	fi

# no AT bridge
	export NO_AT_BRIDGE=1

# Asterism and package installation check
	DESKTOP=$DESKTOP_SESSION

	if [[ -x /usr/bin/gksudo ]]; then
	SUDOTYPE=gksudo; else
	if [[ -x /usr/bin/kdesudo ]]; then
	SUDOTYPE=kdesudo; else

yad --info --center --width=350 --height=300 \
		--title="Asterism Permissions Advice" \
		--text="Your desktop session is $DESKTOP

 To system install Asterism (in /usr/local/bin) and to install required packages from Asterism, the following packages must be installed;

 KDE desktop requires package kdesudo

 or

 package gksu for other desktops; otherwise install required programs using the distribution package manager" \
	--button=Cancel:1 \
	--button=OK:0 \
	--auto-close \
	--auto-kill 
	fi
fi

	if [ $? = 1 ]; then
	exit 1; else
	echo " " >/dev/null 2>&1
	fi

# Asterism version
	Asterism_version=$'Asterism_0.1.3.4'

# title
	title='Asterism'

# show current time
	time=$(zdump UTC)

# get distro vendor
	vendor=$(lsb_release -i) >/dev/null 2>&1

# show file system info
	space=$(df -l -h ~/)

# system memory
	sysmem=$(free -m | awk '/^Mem:/{ print $2 }')

# OSX friendly get number of processors
	cores=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu)

	if [ $cores == 1 ]; then
	defaultcores=1; else
	((defaultcores=$cores - 1))
	fi

	# cores=$(getconf _NPROCESSORS_ONLN)

# location of autowhite balance
	if [ -e /usr/local/bin/autowhite ]; then
	autow=$(readlink -f /usr/local/bin/autowhite); else
	autow=$(readlink -f $source/autowhite)
	fi

# location of colorbalance
	if [ -e /usr/local/bin/colorbalance ]; then
	cbalance=$(readlink -f /usr/local/bin/colorbalance); else
	cbalance=$(readlink -f $source/colorbalance)
	fi

# location of curves
	if [ -e /usr/local/bin/curves ]; then
	curves=$(readlink -f /usr/local/bin/curves); else
	curves=$(readlink -f $source/curves)
	fi

# location of denoise
	if [ -e /usr/local/bin/denoise ]; then
	denoise=$(readlink -f /usr/local/bin/denoise); else
	denoise=$(readlink -f $source/denoise)
	fi

# location of help file
	if [ -e /usr/local/bin/help.txt ]; then
	help=$(readlink -f /usr/local/bin/help.txt); else
	help=$(readlink -f $source/help.txt)
	fi

# location of splash image
	if [ -e /usr/local/bin/AsterismLOGOsplash.png ]; then
	splash=$(readlink -f /usr/local/bin/AsterismLOGOsplash.png); else
	splash=$(readlink -f $source/AsterismLOGOsplash.png)
	fi

# location of yad window icon
	if [ -e /usr/local/bin/AsterismLOGOs.png ]; then
	wicon=$(readlink -f /usr/local/bin/AsterismLOGOs.png); else
	wicon=$(readlink -f $source/AsterismLOGOs.png)
	fi

# create directory (if needed) helper function
	function createDirIfNeeded ()
	{
	if [ -d $1 ]
	then
		echo " " >/dev/null 2>&1
	else
		echo "		Create $1 folder"
	mkdir $1
	fi
	}

# file type function
	function fileType () 
	{
	files=$(basename -a *.*)
	ext="${files##*.}"
	}

# function - number of files in folder
	function numFiles ()
	{
	f=$(find . -type f | wc -l)
	}

# yad progress function
	function yadProgress ()
	{
	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--auto-close \
  	--auto-kill 2>/dev/null
	}

# yad error function
	function yadError ()
	{
	(( $? != 0 )) && yad --error --text="Error in yad command"
	}

# mean stack function
	function meanStack () 
	{
	convert *.tif -depth $depth -evaluate max $qrmax% -evaluate min $qrmin% -evaluate-sequence mean stack_$name.tif >/dev/null 2>&1
	}

# clean up function
	function cleanUp ()
	{
	rm -f -R $tmpdir $imagedir/.magick
	}

# function - killall
	function killAll ()
	{
	killall asterism awk yad convert display
	}

# create ~/.asterism directory
	createDirIfNeeded ~/.asterism

# location of log file
	log=~/.asterism/log

# image session info log file
	project_log=~/.asterism/project_log
	
# resources log file
	syslog=~/.asterism/syslog

# camera log
	add_cam=~/.asterism/add_cam

# camera channel list multiple cameras
	cam_list=~/.asterism/cam_list

	touch $cam_list

# camera channel list edited
	new_cam_list=~/.asterism/new_cam_list

	touch $new_cam_list

# camera and channel selection and configuration log
	multi_log=~/.asterism/multi_log

# no config
	noconfig=~/.asterism/noconfig
	createDirIfNeeded $noconfig

# yad notebook plug key
	key=$RANDOM

# splash screen
	yad --no-buttons --undecorated --center --image=$splash --timeout=1 2>/dev/null

# camera list variables
	cam1=$(awk 'NR==1 { print $1 }' "$cam_list")
	cam2=$(awk 'NR==2 { print $1 }' "$cam_list")
	cam3=$(awk 'NR==3 { print $1 }' "$cam_list")
	cam4=$(awk 'NR==4 { print $1 }' "$cam_list")
	cam5=$(awk 'NR==5 { print $1 }' "$cam_list")

# documentation tab
	yad --plug=$key --tabnum=7 --text-info < $help --show-uri \
		--fontname="Georgia 11" \
		--filename=help.txt \
		--wrap \
		--justify=fill \
		--margins=10 \
		--auto-close \
		--auto-kill &> res7 &

# system management tab
	yad --plug=$key --tabnum=6 --form --columns=2 --editable --separator=':' \
--text="$Asterism_version - Copyright (c) 2017 (cheshire_r@fastmail.fm). 
		
This program comes with ABSOLUTELY NO WARRANTY. This is free software and you are welcome to redistribute it under certain conditions - GPLv3.

$space		Source Files $source 	$vendor
		" \
		--field="Processors":RO \
			"$cores" \
		--field="ImageMagick threads":NUM \
			"$defaultcores"!1.."$cores"!1!0 \
		--field="Memory":RO \
			"$sysmem" \
		--field="ImageMagick memory limit %":SCL \
			'50!10..100!1!0' | awk 'BEGIN { FS = ":" } ; { print $0 }' > $syslog | &> res6 &

# project details tab
	yad --plug=$key --tabnum=5 --form --columns=3 --separator=':' \
		--text="Record project details
		" \
		--field="Free Text" \
		'' \
		--field="Astrophotographer" \
			'Name' \
		--field="Location" \
			'Dark Site' \
		--field="Date of Acquisition":DT \
			'DD/MM/YY' \
		--field="Camera" \
			'Make Model' \
		--field="Cooling" \
			'Temperature C/F' \
		--field="Lens or Telescope" \
			'Make Model' \
		--field="Focal Length Aperture" \
			'MM f/' \
		--field="Mount" \
			'Make Model' \
		--field="Guiding" \
			'Software Hardware' \
		--field="Light Frames" \
			'Number Exposure Time ISO' \
		--field="Calibration Frames" \
			'Bias  Dark  Flat' \
		--field="UTC":RO \
			"$time" | awk 'BEGIN { FS = ":" } ; { print $0 }' > $project_log | &> res5 &

# edit camera list
	yad --plug=$key --tabnum=4 --text-info --separator=':' --editable < $cam_list > $new_cam_list | &> res4 &

# add camera RGB channel multiplier matrix
	yad --plug=$key --tabnum=3 --form --columns=4 --separator=':' \
		--text="Generate RGB channel multiplier matrix" \
		--field='Camera' \
			'-' \
		--field="":RO \
			'' \
		--field="":RO \
			'' \
		--field="RR":NUM \
			'0!-2..2!0.01!2' \
		--field="GR":NUM \
			'0!-2..2!0.01!2' \
		--field="BR":NUM \
			'0!-2..2!0.01!2' \
		--field="RG":NUM \
			'0!-2..2!0.01!2' \
		--field="GG":NUM \
			'0!-2..2!0.01!2' \
		--field="BG":NUM \
			'0!-2..2!0.01!2' \
		--field="RB":NUM \
			'0!-2..2!0.01!2' \
		--field="GB":NUM \
			'0!-2..2!0.01!2' \
		--field="BB":NUM \
			'0!-2..2!0.01!2' | awk 'BEGIN { FS = ":" } ; { print $0 }' > $add_cam | &> res3 & 

# camera channel multiplier application
	yad --plug=$key --tabnum=2 --form --columns=2 --separator=':' \
		--text="Select camera and channel multiplier matrix sequence - pre or post image stack" \
		--field="Camera":CB \
			"$cam1"!"$cam2"!"$cam3"!"$cam4"!"$cam5" \
		--field="Channel multipliers":CB \
			'NONE!PRESTACK!POSTSTACK' | awk 'BEGIN { FS = ":" } ; { print $0 }' > $multi_log | &> res2 &

# preprocessing options tab
	yad --plug=$key --tabnum=1 --form --separator=':' --columns=3 \
		--text="<b>Select a project (output) folder process and options</b>
		" \
		--field="<b>Project folder*</b>":DIR \
			"$noconfig" \
		--field="<b>Input format</b>":CB \
			'RAW!OTHER!OTHER BAYER' \
		--field="<b>Output format</b>" \
			'tif' \
		--field="<b>Colour depth</b>":CB \
			'16!8!24!32!48!64!' \
		--field="Map defects":CHK \
			'TRUE!FALSE' \
		--field="Bias frames":CHK \
			'TRUE!FALSE' \
		--field="- Super":CHK \
			'TRUE!FALSE' \
		--field="- Median":CHK \
			'TRUE!FALSE' \
		--field="Dark frames":CHK \
			'TRUE!FALSE' \
		--field="- Median":CHK \
			'TRUE!FALSE' \
		--field="Flat frames":CHK \
			'TRUE!FALSE' \
		--field="- Median":CHK \
			'TRUE!FALSE' \
		--field="Flat correction":NUM \
			'5!0..10!0.1!1' \
		--field="Light frames":CHK \
			'TRUE!FALSE' \
		--field="- DeBayer Align Stack":CHK \
			'TRUE!FALSE' \
		--field="- Develop preview":CHK \
			'TRUE!FALSE' \
		--field="<b>Master frames</b>":BTN \
			'' \
		--field="Defect map":FL \
			'-' \
		--field="Master bias":FL \
			'-' \
		--field="Master dark":FL \
			'-' \
		--field="Master flat":FL \
			'-' \
		--field="<b>Noise reduction parameters</b>":BTN \
			'' \
		--field="Noise - radius":NUM \
			'0!0..30!1!0' \
		--field="Noise - amount":NUM \
			'0!0..5!0.01!2' \
		--field="QRMax":NUM \
			'0!0..5!0.000001!6' \
		--field="QRMin":NUM \
			'100!0..100!0.000001!6' \
		--field="<b>Colour - deBayer options</b>":BTN \
			'' \
		--field="DeBayer":CB \
			'BILINEAR!MALVAR!SUPERPIXEL' \
		--field="Bayer matrix":CB \
			'RGGB!BGGR!GRBG!GBRG' \
		--field="No selection":BTN \
			'' \
		--field="<b>Align and stack options</b>":BTN \
			'' \
		--field="Interface":CB \
			'SYSTEM!HUGIN!MACROFUSION' \
		--field="Alignment":CB \
			'LINEAR!MULTI!ALL PAIRS' \
		--field="Stack":CB \
			'POLY!MEAN!MEDIAN!ENFUSE' \
		--field="<b>Alignment settings</b>":BTN \
			'' \
		--field="Ransac iterations":NUM \
			'200' \
		--field="HFOV":NUM \
			'8' \
		--field="Mask":CB \
			'NONE!SOFT!HARD' \
		--field="Cache":NUM \
			'4096' | awk 'BEGIN { FS = ":" } ; { print $0 }' > $log | &> res1 &

# run main notebook dialog
yad --notebook --key=$key --center --tab="<b>Process and options</b>" --tab="<b>Select camera matrix</b>" --tab="<b>Add camera matrix</b>" --tab="<b>Edit camera list</b>" --tab="<b>Project details</b>" --tab="<b>System settings</b>" --tab="<b>Documentation</b>" \
		--text="<span foreground='grey'><b><big>$Asterism_version</big></b></span>" \
    		--title="Asterism" \
		--window-icon=$wicon \
		--image=$wicon \
		--image-on-top \
		--buttons-layout=spread \
		--button=Quit:1 \
		--button='Files:bash -c "yad --file --center --save --title="Files" --height=600 --width=450"' \
		--button='Monitor:bash -c "./gamma.sh"' \
		--button='Convert:bash -c "./conversion"' \
		--button='Inspect:bash -c "./inspect"' \
		--button='PMStack:bash -c "./pmstack"' \
		--button='Hugin: hugin' \
		--button='Histogram:bash -c "./histogram"' \
		--button=Process:0  2>/dev/null

#		--button='Monitor: gamma.sh' \
#		--button='Convert: conversion' \
#		--button='Inspect: inspect' \
#		--button='PMStack: pmstack' \
#		--button='Hugin: hugin' \
#		--button='Histogram: histogram' \
		
# run quit asterism
	if [[ $? = 1 || $? = 252 ]]; then
	killAll
	rm -f $source/res*
	exit 1; else
	echo " " >/dev/null 2>&1
	fi
	
	directory=$(awk 'BEGIN { FS = ":" } ; { print $1 }' directory=$1 $log)
	raw=$(awk 'BEGIN { FS = ":" } ; { print $2 }' raw=$2 $log)
	format=$(awk 'BEGIN { FS = ":" } ; { print $3 }' format=$3 $log)	
	depth=$(awk 'BEGIN { FS = ":" } ; { print $4 }' depth=$4 $log)
	defect=$(awk 'BEGIN { FS = ":" } ; { print $5 }' defect=$5 $log)
	bias=$(awk 'BEGIN { FS = ":" } ; { print $6 }' bias=$6 $log)
	superbias=$(awk 'BEGIN { FS = ":" } ; { print $7 }' superbias=$7 $log)
	medbias=$(awk 'BEGIN { FS = ":" } ; { print $8 }' medbias=$8 $log)
	dark=$(awk 'BEGIN { FS = ":" } ; { print $9 }' dark=$9 $log)
	meddark=$(awk 'BEGIN { FS = ":" } ; { print $10 }'  meddark=$10 $log)	
	flat=$(awk 'BEGIN { FS = ":" } ; { print $11 }' flat=$11 $log)
	medflat=$(awk 'BEGIN { FS = ":" } ; { print $12 }' medflat=$12 $log)
	autof=$(awk 'BEGIN { FS = ":" } ; { print $13 }' autof=$13 $log)
	light=$(awk 'BEGIN { FS = ":" } ; { print $14 }' light=$14 $log)
	process=$(awk 'BEGIN { FS = ":" } ; { print $15 }' process=$15 $log)
	develop=$(awk 'BEGIN { FS = ":" } ; { print $16 }' develop=$16 $log)
	blank1=$(awk 'BEGIN { FS = ":" } ; { print $17 }' blank1=$17 $log)
	defectmap=$(awk 'BEGIN { FS = ":" } ; { print $18 }' defectmap=$18 $log)
	masterbias=$(awk 'BEGIN { FS = ":" } ; { print $19 }' masterbias=$19 $log)
	masterdark=$(awk 'BEGIN { FS = ":" } ; { print $20 }' masterdark=$20 $log)
	masterflat=$(awk 'BEGIN { FS = ":" } ; { print $21 }' masterflat=$21 $log)
	blank2=$(awk 'BEGIN { FS = ":" } ; { print $22 }' blank2=$22 $log)
	radius=$(awk 'BEGIN { FS = ":" } ; { print $23 }' radius=$23 $log)
	amount=$(awk 'BEGIN { FS = ":" } ; { print $24 }' amount=$24 $log)
	qrmax=$(awk 'BEGIN { FS = ":" } ; { print $25 }' qrmax=$25 $log)
	qrmin=$(awk 'BEGIN { FS = ":" } ; { print $26 }' qrmin=$26 $log)
	blank3=$(awk 'BEGIN { FS = ":" } ; { print $27 }' blank3=$27 $log)
	debayer=$(awk 'BEGIN { FS = ":" } ; { print $28 }' debayer=$28 $log)	
	matrix=$(awk 'BEGIN { FS = ":" } ; { print $29 }' matrix=$29 $log)
	demosaic=$(awk 'BEGIN { FS = ":" } ; { print $30 }' demosaic=$30 $log)
	blank6=$(awk 'BEGIN { FS = ":" } ; { print $31 }' blank6=$31 $log)
	interface=$(awk 'BEGIN { FS = ":" } ; { print $32 }' interface=$32 $log)
	cpoint=$(awk 'BEGIN { FS = ":" } ; { print $33 }' cpoint=$33 $log)	
	stack=$(awk 'BEGIN { FS = ":" } ; { print $34 }' stack=$34 $log)
	blank4=$(awk 'BEGIN { FS = ":" } ; { print $35 }' blank4=$35 $log)
	ransac=$(awk 'BEGIN { FS = ":" } ; { print $36 }' ransac=$36 $log)	
	hfov=$(awk 'BEGIN { FS = ":" } ; { print $37 }' hfov=$37 $log)
	mask=$(awk 'BEGIN { FS = ":" } ; { print $38 }' mask=$38 $log)
	cache=$(awk 'BEGIN { FS = ":" } ; { print $39 }' cache=$39 $log)
	demos=$(awk 'BEGIN { FS = ":" } ; { print $40 }' demos=$40 $log)

# get the project name from the project directory

	name=$(basename $directory)

	echo " 		Project name $name - Project directory $directory
		Input format $raw - Output format $format - Depth $depth
		Map defects $defect
		Bias frames $bias - Superbias $superbias - Median bias $medbias
		Dark frames $dark - Median dark $meddark
		Flat frames $flat - Median flat $medflat - Flat correction $autof
		Light frames $light - Process $process - Extract background $develop
		Defect map $defectmap - Master bias $masterbias - Master dark $masterdark - Master flat $masterflat 
		Radius $radius - Amount $amount - QRMax $qrmax - QRMin $qrmin 
		Debayer $debayer - Matrix $matrix 
		Interface $interface - Align $cpoint - Stack $stack  
		Ransac $ransac - HFOV $hfov - Mask $mask - Cache $cache
		DeBayer only $demos"

	processors=$(awk 'BEGIN { FS = ":" } ; { print $1 }' processors=$1 $syslog)
	threads=$(awk 'BEGIN { FS = ":" } ; { print $2 }' threads=$2 $syslog)
	memory=$(awk 'BEGIN { FS = ":" } ; { print $3 }' memory=$3 $syslog)
	memlimit=$(awk 'BEGIN { FS = ":" } ; { print $4 }' memlimit=$4 $syslog)

	threads=$(echo "scale=0; $threads/1" | bc)

# imagemagick in-built resources - processing threads and memory allocation
	export MAGICK_THREAD_LIMIT=$threads
			
	magickmem=$(echo "scale=0; $sysmem/100*$memlimit" | bc)

	export MAGICK_MEMORY_LIMIT=$magickmem'MiB'

	((maplimit=$sysmem/4))

	export MAGICK_MAP_LIMIT=$maplimit'MiB'

	echo "
ImageMagick resources

		Using $threads of $cores threads and $magickmem of "$sysmem"MB or "$memlimit"% of memory
		Map limit = "$maplimit"MB"

	echo "File loading and preprocessing"

# add camera RGB channel matrix file
	mv $new_cam_list $cam_list

	noaddcam=$(awk 'BEGIN { FS = ":" } ; { print $1 }' $add_cam)

	if [ "$noaddcam" = "-" ]; then
	echo " " >/dev/null 2>&1; else

	awk 'BEGIN { FS = ":" } ; { print $1,$4,$5,$6,$7,$8,$9,$10,$11,$12 }' $add_cam | tee -a $cam_list
	fi

	rm $add_cam

# channel multiplier camera and variables
	camera=$(awk 'BEGIN { FS = ":" } ; { print $1 }' camera=$1 $multi_log)
	multi=$(awk 'BEGIN { FS = ":" } ; { print $2 }' multi=$2 $multi_log)
	
	if [ "$camera" = "$cam1" ]; then
	
	Rr=$(awk 'NR==1 { print $2 }' $cam_list)
	Gr=$(awk 'NR==1 { print $3 }' $cam_list)
	Br=$(awk 'NR==1 { print $4 }' $cam_list)
	Rg=$(awk 'NR==1 { print $5 }' $cam_list)
	Gg=$(awk 'NR==1 { print $6 }' $cam_list)
	Bg=$(awk 'NR==1 { print $7 }' $cam_list)
	Rb=$(awk 'NR==1 { print $8 }' $cam_list)
	Gb=$(awk 'NR==1 { print $9 }' $cam_list)
	Bb=$(awk 'NR==1 { print $10 }' $cam_list)

	else

	if [ "$camera" = "$cam2" ]; then 

	Rr=$(awk 'NR==2 { print $2 }' $cam_list)
	Gr=$(awk 'NR==2 { print $3 }' $cam_list)
	Br=$(awk 'NR==2 { print $4 }' $cam_list)
	Rg=$(awk 'NR==2 { print $5 }' $cam_list)
	Gg=$(awk 'NR==2 { print $6 }' $cam_list)
	Bg=$(awk 'NR==2 { print $7 }' $cam_list)
	Rb=$(awk 'NR==2 { print $8 }' $cam_list)
	Gb=$(awk 'NR==2 { print $9 }' $cam_list)
	Bb=$(awk 'NR==2 { print $10 }' $cam_list)

	else
	
	if [ "$camera" = "$cam3" ]; then	

	Rr=$(awk 'NR==3 { print $2 }' $cam_list)
	Gr=$(awk 'NR==3 { print $3 }' $cam_list)
	Br=$(awk 'NR==3 { print $4 }' $cam_list)
	Rg=$(awk 'NR==3 { print $5 }' $cam_list)
	Gg=$(awk 'NR==3 { print $6 }' $cam_list)
	Bg=$(awk 'NR==3 { print $7 }' $cam_list)
	Rb=$(awk 'NR==3 { print $8 }' $cam_list)
	Gb=$(awk 'NR==3 { print $9 }' $cam_list)
	Bb=$(awk 'NR==3 { print $10 }' $cam_list)

	else

	if [ "$camera" = "$cam4" ]; then

	Rr=$(awk 'NR==4 { print $2 }' $cam_list)
	Gr=$(awk 'NR==4 { print $3 }' $cam_list)
	Br=$(awk 'NR==4 { print $4 }' $cam_list)
	Rg=$(awk 'NR==4 { print $5 }' $cam_list)
	Gg=$(awk 'NR==4 { print $6 }' $cam_list)
	Bg=$(awk 'NR==4 { print $7 }' $cam_list)
	Rb=$(awk 'NR==4 { print $8 }' $cam_list)
	Gb=$(awk 'NR==4 { print $9 }' $cam_list)
	Bb=$(awk 'NR==4 { print $10 }' $cam_list)
	
	else

	if [ "$camera" = "$cam5" ]; then
			
	Rr=$(awk 'NR==5 { print $2 }' $cam_list)
	Gr=$(awk 'NR==5 { print $3 }' $cam_list)
	Br=$(awk 'NR==5 { print $4 }' $cam_list)
	Rg=$(awk 'NR==5 { print $5 }' $cam_list)
	Gg=$(awk 'NR==5 { print $6 }' $cam_list)
	Bg=$(awk 'NR==5 { print $7 }' $cam_list)
	Rb=$(awk 'NR==5 { print $8 }' $cam_list)
	Gb=$(awk 'NR==5 { print $9 }' $cam_list)
	Bb=$(awk 'NR==5 { print $10 }' $cam_list)	
				fi		
			fi
		fi	
	fi
fi

# enfuse mask variables
	if [ "$mask" = "NONE" ]; then
	MASK=""; else
	if [ "$mask" = "SOFT" ]; then
	MASK=--soft-mask; else
	if [ "$mask" = "HARD" ]; then
	MASK=--hard-mask; else	
	echo " " >/dev/null 2>&1
		fi
	fi
fi

# alignment control point variable
	if [ "$cpoint" = "LINEAR" ]; then
	CPOINT=--linearmatch; else
	if [ "$cpoint" = "MULTI" ]; then
	CPOINT=--multirow; else
	if [ "$cpoint" = "ALL PAIRS" ]; then
	CPOINT=""; else	
	echo " " >/dev/null 2>&1
		fi
	fi
fi

# set up paths and other environment variables
	stagingdir=~/.asterism/staging
	masterdir=$imagedir/master
	tmpdir=$imagedir/.tmp
	tmpfdir=$imagedir/.tmp/tmpf
	tmpldir=$imagedir/.tmp/tmpl
	rejectdir=$imagedir/rejects
	previewdir=$imagedir/.preview
	llrgbdir=$imagedir/llrgb_$name
	processdir=$imagedir/process_$name
	debaydir=$imagedir/process_$name/debayer_$name
	

# look for dcraw RAW convertor
	if [[ -x /usr/bin/dcraw || -x /usr/local/bin/dcraw ]]; then
	echo " " >/dev/null 2>&1;
	else

yad --question --window-icon=$wicon --width=300 --title="$title - Install dcraw" --text="Install dcraw?" --button=No:1 --button=Yes:0 2>/dev/null

		if [ $? = 1 ]; then
		exit 1; else
		echo " " >/dev/null 2>&1
		fi

# Prompt for the password. Replace "the process" with a meaningful message.
		SUDOPASSWORD="$( $SUDOTYPE --print-pass --message 'Type your password, or press Cancel.' -- : 2>/dev/null )"

# Check for null entry or cancellation.
		if [[ ${?} != 0 || -z ${SUDOPASSWORD} ]]; then
    		exit 4
		fi

# Check that the password is valid.
		if ! sudo -kSp '' [ 1 ] <<<"${SUDOPASSWORD}" 2>/dev/null
		then
   		exit 4
		fi

		echo -e $SUDOPASSWORD | sudo -S rpm -i dcraw*.rpm 
		sudo rpm -U dcraw*.rpm
		sudo yast2 -i dcraw*.rpm
		sudo apt-get install dcraw
fi

# look for imagemagick - imagemagick 7 proof
	if [[ -x /usr/bin/convert-im6 || -x /usr/bin/magick || -x /usr/local/bin/magick ]]; then
	echo " " >/dev/null 2>&1;
	else

yad --question --window-icon=$wicon --width=300 --title="$title Install ImageMagick" --text="Install ImageMagick?" --button=No:1 --button=Yes:0 2>/dev/null

		if [ $? = 1 ]; then
		exit 1; else
		echo " " >/dev/null 2>&1
		fi

# Prompt for the password. Replace "the process" with a meaningful message.
		SUDOPASSWORD="$( $SUDOTYPE --print-pass --message 'Type your password, or press Cancel.' -- : 2>/dev/null )"

# Check for null entry or cancellation.
		if [[ ${?} != 0 || -z ${SUDOPASSWORD} ]]; then
    		exit 4
		fi

# Check that the password is valid.
		if ! sudo -kSp '' [ 1 ] <<<"${SUDOPASSWORD}" 2>/dev/null
		then
   		exit 4
		fi

		echo -e $SUDOPASSWORD | sudo -S sudo rpm -i imagemagick*.rpm
		sudo rpm -U imagemagick*.rpm
		sudo yast2 -i imagemagick*.rpm
		sudo apt-get install imagemagick
fi

# look for align_image_stack - image registration - likely to be installed as a dependency for macrofusion and hugin
	if [[ -x /usr/bin/align_image_stack ]]; then
	echo " " >/dev/null 2>&1;
	else

yad --question --window-icon=$wicon --width=300 --title="$title Install Panotools" --text="Install Panotools?" --button=No:1 --button=Yes:0 2>/dev/null

		if [ $? = 1 ]; then
		exit 1; else
		echo " " >/dev/null 2>&1
		fi

# Prompt for the password. Replace "the process" with a meaningful message.
		SUDOPASSWORD="$( $SUDOTYPE --print-pass --message 'Type your password, or press Cancel.' -- : 2>/dev/null )"

# Check for null entry or cancellation.
		if [[ ${?} != 0 || -z ${SUDOPASSWORD} ]]; then
    		exit 4
		fi

# Check that the password is valid.
		if ! sudo -kSp '' [ 1 ] <<<"${SUDOPASSWORD}" 2>/dev/null
		then
   		exit 4
		fi

		echo -e $SUDOPASSWORD | sudo -S sudo rpm -i panotools*.rpm
		sudo rpm -U panotools*.rpm
		sudo yast2 -i panotools*.rpm
		sudo apt-get install panotools
fi

# look for enfuse - image registration - likely to be installed as a dependency for macrofusion and hugin
	if [[ -x /usr/bin/align_image_stack ]]; then
	echo " " >/dev/null 2>&1;
	else

yad --question --window-icon=$wicon --width=300 --title="$title Install Enfuse" --text="Install Enfuse?" --button=No:1 --button=Yes:0 2>/dev/null

		if [ $? = 1 ]; then
		exit 1; else
		echo " " >/dev/null 2>&1
		fi

# Prompt for the password. Replace "the process" with a meaningful message.
		SUDOPASSWORD="$( $SUDOTYPE --print-pass --message 'Type your password, or press Cancel.' -- : 2>/dev/null )"

# Check for null entry or cancellation.
		if [[ ${?} != 0 || -z ${SUDOPASSWORD} ]]; then
    		exit 4
		fi

# Check that the password is valid.
		if ! sudo -kSp '' [ 1 ] <<<"${SUDOPASSWORD}" 2>/dev/null
		then
   		exit 4
		fi

		echo -e $SUDOPASSWORD | sudo -S sudo rpm -i enfuse*.rpm
		sudo rpm -U enfuse*.rpm
		sudo yast2 -i enfuse*.rpm
		sudo apt-get install enfuse
fi

# look for macrofusion - image integration
	if [ "$interface" != "MACROFUSION" ] && [ -x /usr/bin/macrofusion ]; then
	echo " " >/dev/null 2>&1; else
	if [ "$interface" = "MACROFUSION" ] && [ ! -x /usr/bin/macrofusion ]; then

yad --question --window-icon=$wicon --width=300 --title="$title - Install MacroFusion" --text="Install MacroFusion?" --button=No:1 --button=Yes:0 2>/dev/null

		if [ $? = 1 ]; then
		exit 1; else
		echo " " >/dev/null 2>&1
		fi

# Prompt for the password. Replace "the process" with a meaningful message.
		SUDOPASSWORD="$( $SUDOTYPE --print-pass --message 'Type your password, or press Cancel.' -- : 2>/dev/null )"

# Check for null entry or cancellation.
		if [[ ${?} != 0 || -z ${SUDOPASSWORD} ]]; then
    		exit 4
		fi

# Check that the password is valid.
		if ! sudo -kSp '' [ 1 ] <<<"${SUDOPASSWORD}" 2>/dev/null
		then
   		exit 4
		fi

		echo -e $SUDOPASSWORD | sudo -S sudo rpm -i macrofusion*.rpm
		sudo rpm -U macrofusion*.rpm
		sudo yast2 -i macrofusion*.rpm
		sudo apt-get install macrofusion
	fi
fi

# look for hugin - image integration
	if [ "$interface" != "HUGIN" ] && [ -x /usr/bin/hugin ]; then
	echo " " >/dev/null 2>&1; else
	if [ "$interface" = "HUGIN" ] && [ ! -x /usr/bin/hugin ]; then
	
yad --question --window-icon=$wicon --width=300  --title="$title - Install Hugin" --text="Install Hugin?" --button=No:1 --button=Yes:0 2>/dev/null

		if [ $? = 1 ]; then
		exit 1; else
		echo " " >/dev/null 2>&1
		fi

# Prompt for the password. Replace "the process" with a meaningful message.
		SUDOPASSWORD="$( $SUDOTYPE --print-pass --message 'Type your password, or press Cancel.' -- : 2>/dev/null )"

# Check for null entry or cancellation.
		if [[ ${?} != 0 || -z ${SUDOPASSWORD} ]]; then
    		exit 4
		fi

# Check that the password is valid.
		if ! sudo -kSp '' [ 1 ] <<<"${SUDOPASSWORD}" 2>/dev/null
		then
   		exit 4
		fi

		echo -e $SUDOPASSWORD | sudo -S sudo rpm -i hugin*.rpm
		sudo rpm -U hugin*.rpm
		sudo yast2 -i hugin*.rpm
		sudo apt-get install hugin
	fi
fi

# continue or quit asterism
	if [ $? = 0 ]; then
	echo " " >/dev/null 2>&1; else
	killAll
	exit 1
	fi

# no project directory
	if [ "$directory" != "$noconfig" ]; then
	echo " " >/dev/null 2>&1; else
	text=$(echo "Return to Asterism - Please select project folder")
	
	echo "		Return to Asterism - Please select project folder"
	(
	echo ""
	) |
	yad --progress --center \
  	--title="$title - noconfig" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null
	
	rm -f -R $noconfig

	cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit

fi

# create staging directory
	createDirIfNeeded $stagingdir

# No master frame warning - return to Asterism
	if [ "$defect" != "TRUE" ] && [ "$bias" != "TRUE" ] && [ "$dark" != "TRUE" ] && [ "$flat" != "TRUE" ] && [ "$light" != "TRUE" ]; then

	text=$(echo "No frames selected - Return to Asterism")
	
	echo "		No frames selected - Return to Asterism"
	(
	echo ""
	) |
	yad --progress --center \
  	--title="$title - No frames selected" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null
	
	cleanUp

	killAll
	
	cd $source
	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi

exit

fi

	if [ "$light" = "TRUE" ] && [ "$defect" != "TRUE" ] && [ ! -e "$defectmap" ] && [ "$bias" != "TRUE" ] && [ ! -e "$masterbias" ] && [ "$dark" != "TRUE" ] && [ ! -e "$masterdark" ] && [ "$flat" != "TRUE" ] && [ ! -e "$masterflat" ]; then

	yad --info --center \
  	--title="$title - Master frame selection warning - $name" \
	--text="Light frames are marked for preprocessing. No bias dark defect map and flat frames have been selected

If master frames were not created for this project, please consider the following options;

	1. Continue - light frames will not be calibrated

	2. Return - return to the Asterism interface and select the desired calibration frames

		a. Master frames may be created on-the-fly in train with light frames; or

		b. Previously created master frames may be selected individually; or

		c. Use existing master frames as well as creating master frames on-the-fly 

For best light frame calibration results, a minimum of master bias, master flat (and defect map - preferably) is recommended

Note: Asterism will accomodate any combination of master frame selection but dark frames are excluded where master bias or defect map is used for light frame calibration" \
	--window-icon=$wicon \
	--width=500 \
	--button=Return:0 \
	--button=Continue:1 2>/dev/null

		if [ $? = 1 ]; then
		echo " " >/dev/null 2>&1; else

	text=$(echo "Returning to Asterism")

	echo "Returning to Asterism"
	(
	echo ""
	) |
	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit
	fi
fi

# GENERATE DEFECT MAP
	if [ "$defect" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else

	IFS=$'\n'
	files=($(yad --file-selection --center --window-icon=$wicon --height=600 --width=480 --title="$title - Defect map - dark frames $name" --text="Select dark frames" --button=Skip:1 --button=Select:0 --multiple --separator=$'\n' 2>/dev/null))
	echo "${files[@]}" 2>/dev/null

	imagedir=`echo "$files" |xargs dirname`

	echo $imagedir

	if [ -e "$directory/project_details_$name" ]; then
	echo " " >/dev/null 2>&1; else
	awk 'BEGIN { FS = ":" } ; { print $0 }' $project_log | tee -a $directory/project_details_$name
	fi

	export MAGICK_TEMPORARY_PATH="$imagedir/.magick"

	createDirIfNeeded $MAGICK_TEMPORARY_PATH

	logname=$directory/log_$name 2>/dev/null

	cp $log $logname 2>/dev/null

	masterdir=$directory/master
	tmpdir=$imagedir/.tmp

	createDirIfNeeded $masterdir
	createDirIfNeeded $tmpdir

	text=$(echo "Create defect map - mean-shift")

	echo "		Generate defect map"
	(
	echo ""

	for i in `ls -v ${files[@]}`;do dcraw -4 -o 0 -r 1 1 1 1 -D -t 0 -k 0 -H 1 -T $i;done

	mv -f $imagedir/*.tiff $tmpdir >/dev/null 2>&1

	convert $tmpdir/*.tiff -depth $depth -evaluate-sequence mean -mean-shift 7x7+0.1% $stagingdir/DMAP.miff

	rm -f -R $tmpdir
	) |
	yadProgress
	yadError

# display defect map

	if [ ! -e "$stagingdir/DMAP.miff" ]; then
	echo " " >/dev/null 2>&1; else

	echo "		Display defect map"

	convert $stagingdir/DMAP.miff -depth $depth $stagingdir/display_dmap.tiff
	display -normalize -alpha off $stagingdir/display_dmap.tiff
	
	fi

	rm -f $stagingdir/display_dmap.tiff

# continue or terminate

	if [[ "$bias" = "TRUE" || "$dark" = "TRUE" || "$flat" = "TRUE" || "$light" = "TRUE" ]]; then
	echo " " >/dev/null 2>&1; else
	
	mv -f $stagingdir/*.miff $masterdir

	rm -f -R $stagingdir

	text=$(echo "Cleaning up - removing temporary files and folders")

	echo "Cleaning up - removing temporary files and folders"
	(
	echo ""
	) |
	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit
	fi
fi

# PROCESS BIAS FRAMES
	if [ "$medbias" = "TRUE" ]; then
	calstack=median
	else
	calstack=mean
	fi

	text=$(echo "Bias frames")

	if [ "$bias" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	echo "		Select bias frames"

	IFS=$'\n'
	files=($(yad --file-selection --center --window-icon=$wicon --height=600 --width=480 --title="$title - Bias frames $name" --text="Select bias frames" --button=Skip:1 --button=Select:0 --multiple --separator=$'\n' 2>/dev/null))
	echo "${files[@]}" 2>/dev/null

	imagedir=`echo "$files" |xargs dirname`

	echo $imagedir

	if [ -e "$directory/project_details_$name" ]; then
	echo " " >/dev/null 2>&1; else
	awk 'BEGIN { FS = ":" } ; { print $0 }' $project_log | tee -a $directory/project_details_$name
	fi

	export MAGICK_TEMPORARY_PATH="$imagedir/.magick"

	createDirIfNeeded $MAGICK_TEMPORARY_PATH

	logname=$directory/log_$name

	cp $log $logname 2>/dev/null

	masterdir=$directory/master

	createDirIfNeeded $masterdir

	if [ "$raw" != "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo ""
for i in `ls -v ${files[@]}`;do dcraw -4 -o 0 -r 1 1 1 1 -D -t 0 -k 0 -H 1 -T $i;done 
convert $imagedir/*.tiff -depth $depth -evaluate-sequence $calstack -evaluate max $qrmax% -evaluate min $qrmin% $stagingdir/MBIAS.miff >/dev/null 2>&1
	 rm -f $imagedir/*.tiff
	) |
	yadProgress	
	yadError
fi

# bias other format
	if [ "$raw" = "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo "		Bias frames"

	convert "${files[@]}" -depth $depth -evaluate-sequence $calstack -evaluate max $qrmax% -evaluate min $qrmin% $stagingdir/MBIAS.miff >/dev/null 2>&1	
	) |
	yadProgress
	yadError
fi

# copy median combined bias to master directory
	if [ "$calstack" != "median" ]; then
	echo " " >/dev/null 2>&1; else
	mv $stagingdir/MBIAS.miff $stagingdir/MBIAS_median.miff
	fi

# create super-bias
	if [ "$superbias" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else

	text=$(echo "Create super-bias ~1 minute...")
	
	echo "		Create super-bias ~1 minute..."
	(
	echo ""
#	convert $stagingdir/MBIAS.miff -mean-shift 7x7+0.1% $stagingdir/MBIAS_super.miff >/dev/null 2>&1
	$denoise -m median -f 15 $stagingdir/MBIAS.miff $stagingdir/MBIAS_super.miff
	)|
	yadProgress
	yadError

# display superbias
	echo "		Display super-bias"

	convert $stagingdir/MBIAS_super.miff -depth $depth $stagingdir/display_super.tiff

	display -normalize -alpha off $stagingdir/display_super.tiff	
	
	rm -f $stagingdir/display_super.tiff

fi

# display master frame
	if [ "$superbias" = "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	if [ "$medbias" != "TRUE" ]; then
	convert $stagingdir/MBIAS.miff -depth $depth $stagingdir/display_mbias.tiff; else
	convert $stagingdir/MBIAS_median.miff -depth $depth $stagingdir/display_mbias.tiff
	fi

	echo "		Display master bias"

	display -normalize -alpha off $stagingdir/display_mbias.tiff	
	
	rm -f $stagingdir/display_mbias.tiff
fi

# continue or terminate
	if [[ "$dark" = "TRUE" || "$flat" = "TRUE" || "$light" = "TRUE" ]]; then
	echo " " >/dev/null 2>&1; else
	
	mv -f $stagingdir/*.miff $masterdir

	rm -f -R $stagingdir	

	text=$(echo "Cleaning up - removing temporary files and folders")

	echo "Cleaning up - removing temporary files and folders"
	(
	echo ""
	) |
yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit
	fi
fi	

# PROCESS DARK FRAMES
	if [ "$meddark" = "TRUE" ]; then
	calstack=median
	else
	calstack=mean
	fi

	text=$(echo "Dark frames")

	if [ "$dark" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	echo "		Select dark frames"

	IFS=$'\n'
	files=($(yad --file-selection --center --window-icon=$wicon --height=600 --width=480 --title="$title - Dark frames $name" --text="Select dark frames" --button=Skip:1 --button=Select:0 --multiple --separator=$'\n' 2>/dev/null))
	echo "${files[@]}" 2>/dev/null

	imagedir=`echo "$files" |xargs dirname`

	echo $imagedir

	if [ -e "$directory/project_details_$name" ]; then
	echo " " >/dev/null 2>&1; else
	awk 'BEGIN { FS = ":" } ; { print $0 }' $project_log | tee -a $directory/project_details_$name
	fi

	export MAGICK_TEMPORARY_PATH="$imagedir/.magick"

	createDirIfNeeded $MAGICK_TEMPORARY_PATH

	logname=$directory/log_$name 2>/dev/null

	cp $log $logname 2>/dev/null

	masterdir=$directory/master

	createDirIfNeeded $masterdir

	if [ "$raw" != "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo ""
for i in `ls -v ${files[@]}`;do dcraw -4 -o 0 -r 1 1 1 1 -D -t 0 -k 0 -H 1 -T $i; done
convert $imagedir/*.tiff -depth $depth -evaluate-sequence $calstack -evaluate max $qrmax% -evaluate min $qrmin% $stagingdir/MDARK.miff >/dev/null 2>&1	
	rm -f $imagedir/*.tiff
	) |
	yadProgress	
	yadError
	fi

# dark other format
	if [ "$raw" = "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo "		Dark frames"

	convert "${files[@]}" -depth $depth -evaluate-sequence $calstack -evaluate max $qrmax% -evaluate min $qrmin% $stagingdir/MDARK.miff >/dev/null 2>&1	
	) |
	yadProgress
	yadError
fi

# copy median combined dark to master directory
	if [ "$calstack" != "median" ]; then
	echo " " >/dev/null 2>&1; else
	 createDirIfNeeded $stagingdir
	mv $stagingdir/MDARK.miff $stagingdir/MDARK_median.miff
	fi

# display master frame
	if [ "$meddark" != "TRUE" ]; then
	convert $stagingdir/MDARK.miff -depth $depth $stagingdir/display_mdark.tiff; else
	convert $stagingdir/MDARK_median.miff -depth $depth $stagingdir/display_mdark.tiff
	fi

	echo "		Display master dark"

	display -normalize -alpha off $stagingdir/display_mdark.tiff	
	
	rm -f $stagingdir/display_mdark.tiff

# terminate or continue

	if [[ "$flat" = "TRUE" || "$light" = "TRUE" ]]; then
	echo " " >/dev/null 2>&1; else
	
	mv -f $stagingdir/*.miff $masterdir

	rm -f -R $stagingdir

	text=$(echo "Cleaning up - removing temporary files and folders")

	echo "Cleaning up - removing temporary files and folders"
	(
	echo ""
	) |
	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit
	fi
fi	

# PROCESS FLAT FRAMES
	if [ "$medflat" = "TRUE" ]; then
	calstack=median
	else
	calstack=mean
	fi

	text=$(echo "flat frames")

	if [ "$flat" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	echo "		Select flat frames"

	IFS=$'\n'
	files=($(yad --file-selection --center --window-icon=$wicon --height=600 --width=480 --title="$title - Flat frames $name" --text="Select flat frames" --button=Skip:1 --button=Select:0 --multiple --separator=$'\n' 2>/dev/null))
	echo "${files[@]}" 2>/dev/null

	imagedir=`echo "$files" |xargs dirname`

	echo $imagedir

	if [ -e "$directory/project_details_$name" ]; then
	echo " " >/dev/null 2>&1; else
	awk 'BEGIN { FS = ":" } ; { print $0 }' $project_log | tee -a $directory/project_details_$name
	fi

	export MAGICK_TEMPORARY_PATH="$imagedir/.magick"

	createDirIfNeeded $MAGICK_TEMPORARY_PATH

	logname=$directory/log_$name 2>/dev/null

	cp $log $logname 2>/dev/null

	tmpdir=$directory/.tmp
	tmpfdir=$directory/.tmpf
	masterdir=$directory/master

	createDirIfNeeded $tmpdir
	createDirIfNeeded $tmpfdir
	createDirIfNeeded $masterdir

	if [ "$raw" != "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo ""
	for i in `ls -v ${files[@]}`;do dcraw -4 -o 0 -r 1 1 1 1 -D -t 0 -k 0 -H 1 -T $i; done
	x=(0)
	for i in `ls -v $imagedir/*.tiff`;do convert $i -depth $depth $tmpdir/$((x++))_$name.miff;done
	rm -f $imagedir/*.tiff
	) |
	yadProgress	
	yadError
	fi

# flat other format
	if [ "$raw" = "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo "		Flat frames"

	convert ${files[@]} -depth $depth $tmpdir/%d_$name.miff	
	) |
	yadProgress
	yadError
	fi

# flat calibration - bias subtraction
	text=$(echo "Bias subtract flat frames")

	if [[ -e "$stagingdir/MBIAS_super.miff" || -e "$stagingdir/MBIAS_median.miff" || -e "$stagingdir/MBIAS.miff" ]]; then
	echo " " >/dev/null 2>&1; else

	IFS=$'\n'
	files=($(yad --file-selection --center --window-icon=$wicon --height=600 --width=480 --title="$title - Master bias $name" --text="Select master bias" --button=Skip:1 --button=Load:0 --separator=$'\n' 2>/dev/null))

	if [ $? = 1 ]; then
	mv $tmpdir/*.miff $tmpfdir
	echo " " >/dev/null 2>&1; else
	cp "${files[@]}" "$stagingdir" 2>/dev/null
	fi
fi

	if [ "$superbias" != "TRUE" ] && [ "$medbias" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	rm $stagingdir/MBIAS.miff
	fi

	if [[ "$superbias" != "TRUE" || "$medbias" != "TRUE" ]]; then
	echo " " >/dev/null 2>&1; else
	rm $stagingdir/MBIAS.miff
	fi

	cbias=$stagingdir/MBIAS*.miff

	echo "		Bias subtract flat frames"
	(
	echo ""
	x=(0)
	for i in `ls -v $tmpdir/*.miff`;do convert $i $cbias -compose Minus_Src -composite $tmpfdir/$((x++))_$name.miff;done
	) |
	yadProgress	
	yadError

	cd $tmpfdir

# median or mean stack flat
	if [ "$medflat" = "TRUE" ]; then
	calstack=median
	else
	calstack=mean
	fi

	text=$(echo "$calstack Stack flat frames")

	echo "		$calstack Stack flat frames"
	(
	echo ""

convert $tmpfdir/*.miff -evaluate-sequence $calstack -evaluate max $qrmax% -evaluate min $qrmin% -mean-shift "$radius"x"$radius"+"$amount"% $stagingdir/MFLAT.miff >/dev/null 2>&1
	) |
	yadProgress		
	yadError

# copy median combined flat to master directory
	if [ "$calstack" != "median" ]; then
	echo " " >/dev/null 2>&1; else
	mv $stagingdir/MFLAT.miff $stagingdir/MFLAT_median.miff
	fi

	rm -f -R $tmpdir
	rm -f -R $tmpfdir

# display master frame
	if [ "$medflat" != "TRUE" ]; then
	convert $stagingdir/MFLAT.miff -depth $depth $stagingdir/display_mflat.tiff; else
	convert $stagingdir/MFLAT_median.miff -depth $depth $stagingdir/display_mflat.tiff
	fi

	echo "		Display master flat"

	display -normalize -alpha off $stagingdir/display_mflat.tiff	
	
	rm -f $stagingdir/display_mflat.tiff

#continue or terminate

	if [[ "$light" = "TRUE" ]]; then
	echo " " >/dev/null 2>&1; else
	
	mv -f $stagingdir/*.miff $masterdir

	rm -f -R $stagingdir
	
	text=$(echo "Cleaning up - removing temporary files and folders")

	echo "Cleaning up - removing temporary files and folders"
	(
	echo ""
	) |
	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit
	fi
fi

# LOAD RAW LIGHT FRAMES

	if [ "$light" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	
	echo "		Light frames"

	text=$(echo "Light frames")

	IFS=$'\n'
	files=($(yad --file-selection --center --window-icon=$wicon --height=600 --width=480 --title="$title - Light Frames $name" --text="Select process frames" --button=Skip:1 --button=Load:0 --multiple --separator=$'\n' 2>/dev/null))
	echo "${files[@]}" 2>/dev/null

	imagedir=`echo "$files" |xargs dirname`

	echo $imagedir

	if [ -e "$directory/project_details_$name" ]; then
	echo " " >/dev/null 2>&1; else
	awk 'BEGIN { FS = ":" } ; { print $0 }' $project_log | tee -a $directory/project_details_$name
	fi

	export MAGICK_TEMPORARY_PATH="$imagedir/.magick"

	createDirIfNeeded $MAGICK_TEMPORARY_PATH

	logname=$directory/log_$name 2>/dev/null

	cp $log $logname 2>/dev/null

	masterdir=$directory/master
	tmpdir=$directory/.tmp
	tmpldir=$directory/.tmpl
	processdir=$directory/process_$name
	debaydir=$directory/debayer_$name
	llrgbdir=$directory/llrgb_$name

	createDirIfNeeded $tmpdir
	createDirIfNeeded $tmpldir
	createDirIfNeeded $processdir
	rm -f -R $processdir
	createDirIfNeeded $processdir
	
	if [ "$raw" != "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo ""	
	for i in `ls -v ${files[@]}`;do dcraw -4 -o 0 -r 1 1 1 1 -D -t 0 -k 0 -H 1 -T $i; done
	x=(0)
	for i in `ls -v $imagedir/*.tiff`;do convert $i -depth $depth $tmpdir/$((x++))_$name.miff;done
	rm -f $imagedir/*.tiff
	) |
	yadProgress	
	yadError
	fi
fi

# process other light frames
	if [ "$raw" = "RAW" ]; then
	echo " " >/dev/null 2>&1; else
	(
	echo "		Light frames"

	convert ${files[@]} -depth $depth $tmpdir/%d_$name.miff	
	) |
	yadProgress
	yadError
fi

# check for calibration frames
	if [ "$bias" != "TRUE" ] && [ ! -e "$masterbias" ] && [ "$dark" != "TRUE" ] && [ ! -e "$masterdark" ] && [ "$defect" != "TRUE" ] && [ ! -e "$defectmap" ]; then
	mv $tmpdir/*.miff $tmpldir
	fi

# check master directory present and if staging directory present move master frames to master directory
	if [ -d "$masterdir" ]; then
	echo " " >/dev/null 2>&1; else
	createDirIfNeeded $masterdir
	fi

	if [ ! -e "$stagingdir" ]; then
	echo " " >/dev/null 2>&1; else
	mv -f $stagingdir/*.miff $masterdir

	rm -f -R $stagingdir

	fi

# master bias subtraction - regulated cooled cameras < 0C
	text=$(echo "Light frames - subtract bias")

# no bias frame selected - no bias subtraction - use best master bias
	if [ "$bias" != "TRUE" ] && [ ! -e "$masterbias" ]; then
	echo " " >/dev/null 2>&1; else

	if [ -e $masterbias ]; then
	cbias=$masterbias; else
	if [ ! -e $masterbias ] && [ -e "$masterdir/MBIAS_super.miff" ]; then
	cbias=$masterdir/MBIAS_super.miff; else	
	if [ ! -e $masterbias ] && [ ! -e "$masterdir/MBIAS_super.miff" ] && [ -e "$masterdir/MBIAS_median.miff" ]; then
	cbias=$masterdir/MBIAS_median.miff; else
	if [ ! -e $masterbias ] && [ ! -e "$masterdir/MBIAS_super.miff" ] && [ ! -e "$masterdir/MBIAS_median.miff" ] && [ -e "$masterdir/MBIAS.miff" ]; then
	cbias=$masterdir/MBIAS.miff
			fi
		fi
	fi
fi

	echo "		Light frames - subtract bias"
	(
	echo ""
	x=(0)
	for i in `ls -v $tmpdir/*.miff`;do convert $i $cbias -compose Minus_Src -composite $tmpldir/$((x++))_$name.miff;done
	) |
	yadProgress	
	yadError
fi

# defect map subtraction

	text=$(echo "Light frames - apply defect map")

	if [ "$defect" != "TRUE" ] && [ ! -e "$defectmap" ]; then
	echo " " >/dev/null 2>&1; else

	if [[ "$bias" = "TRUE" || -e "$masterbias" ]]; then
	echo " " >/dev/null 2>&1; else

	if [ -e "$defectmap" ]; then
	cdmap=$defectmap; else
	cdmap=$masterdir/DMAP.miff	
	fi

	echo "		Light frames - apply defect map"
	(
	echo ""
	x=(0)
	for i in `ls -v $tmpdir/*.miff`;do convert $i $cdmap -compose Minus_Src -composite $tmpldir/$((x++))_$name.miff; done
	) |
	yadProgress
	yadError
	fi
fi

# master dark subtraction
	text=$(echo "Light frames - subtract dark")

# skip - no dark frame selection
	if [ ! -e "$masterdark" ] && [ "$dark" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else

# skip - dark frame if bias frame or defect map selected

	if [[ "$bias" = "TRUE" || -e "$masterbias" ]]; then
	echo " " >/dev/null 2>&1; else

	if [[ "$defect" = "TRUE" || -e "$defectmap" ]]; then
	echo " " >/dev/null 2>&1; else

	if [ -e $masterdark ]; then
	cdark=$masterdark; else	
	if [ ! -e $masterdark ] && [ -e "$masterdir/MDARK_median.miff" ]; then
	cdark=$masterdir/MDARK_median.miff; else
	if [ ! -e $masterdark ] && [ ! -e "$masterdir/MDARK_median.miff" ]; then
	cdark=$masterdir/MDARK.miff
		fi
	fi
fi

	echo "		Light frames - subtract dark"
	(
	echo ""
	x=(0)
	for i in `ls -v $tmpdir/*.miff`;do convert $i $cdark -compose Minus_Src -composite $tmpldir/$((x++))_$name.miff;done
	) |
	yadProgress	
	yadError
		fi
	fi
fi

	rm -f -R $tmpdir

# master flat division
	
	text=$(echo "Light frames - divide flat")

	if [ ! -e "$masterflat" ] && [ "$flat" != "TRUE" ]; then
	mv $tmpldir/*.miff $processdir
	echo " " >/dev/null 2>&1; else
	
	if [ -e $masterflat ]; then
	cflat=$masterflat; else
	if [ ! -e $masterflat ] && [ -e "$masterdir/MFLAT_median.miff" ]; then
	cflat=$masterdir/MFLAT_median.miff; else
	if [ ! -e $masterflat ] && [ ! -e "$masterdir/MFLAT_median.miff" ] && [ -e "$masterdir/MFLAT.miff" ]; then
	cflat=$masterdir/MFLAT.miff
		fi
	fi
fi

	echo "		Light frames - divide flat"
	(
	echo ""

	if [ "$autof" = "0.000000" ]; then
	echo " " >/dev/null 2>&1; else

	fmean=$(identify -format "%[mean]" $cflat)

	x=(0)

	for i in `ls -v $tmpldir/*.miff`;do 

	lmean=$(identify -format "%[mean]" $i)

	fcorr=$(echo "scale=6; $lmean*$autof/$fmean" | bc)

	convert $cflat -evaluate Multiply $fcorr $masterdir/MFLAT_corr.miff

	convert $i $masterdir/MFLAT_corr.miff -compose Divide_Src -composite $processdir/$((x++))_$name.miff
	
	done

	rm -f $masterdir/MFLAT_corr.miff

	fi

	) |
	yadProgress
	yadError
fi

	rm -f -R $tmpldir

# continue processing or review light calibration results
	if [ "$process" = "TRUE" ]; then
	echo " " >/dev/null 2>&1; else
	convert $processdir/0*.miff -depth $depth $processdir/calibrated.tiff

	echo "		Display light frame calibration result"

	display -normalize -alpha off $processdir/calibrated.tiff

	rm -f $processdir/calibrated.tiff

	text=$(echo "Cleaning up - removing temporary files and folders")

	echo "Cleaning up - removing temporary files and folders"
	(
	echo ""
	) |
	yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit

fi

# SUPERPIXEL DEMOSAIC - 50% file size - miff files in process directory

	if [ "$debayer" != "SUPERPIXEL" ]; then
	echo " " >/dev/null 2>&1; else

	if [ "$raw" != "RAW" ] && [ "$raw" != "OTHER BAYER" ]; then
	echo " " >/dev/null 2>&1; else

	text=$(echo "DeBayer")	

	cd $processdir

	createDirIfNeeded B
	createDirIfNeeded G
	createDirIfNeeded g
	createDirIfNeeded R
	
	(
	echo "DEMOSAIC MONO CFA"

	x=(0)

	for i in `ls -v *.miff`; do convert "$i" -depth $depth -roll +0+0 -sample 50% B/"$((x++)).miff";done

	x=(0)

	for i in `ls -v *.miff`; do convert "$i" -depth $depth -roll +0+1 -sample 50% G/"$((x++)).miff";done

	x=(0)

	for i in `ls -v *.miff`; do convert "$i" -depth $depth -roll +1+0 -sample 50% g/"$((x++)).miff";done

	x=(0)

	for i in `ls -v *.miff`; do convert "$i" -depth $depth -roll +1+1 -sample 50% R/"$((x++)).miff";done

	x=(0)
	for ((R=0,G=0,g=0,B=0;R<=101;R+=1,G+=1,g+=1,B+=1)); do

	convert R/$R.miff G/$G.miff B/$B.miff depth $depth -colorspace sRGB -combine "$((x++))_$name.tiff"
	
	done

	for i in `ls -v *.tiff`; do mogrify -alpha off $i;done

	rm -f *.miff

	) |
	yad --progress \
  		--title="$TITLE - DEMOSAIC $name" \
  		--progress-text="Demosaic / Debayer CFA" \
		--width=300 \
		--window-icon=$WICON \
		--no-buttons \
  		--pulsate \
  		--auto-close \
  		--auto-kill		

	(( $? != 0 )) && yad --error --text="Error in yad command."
	fi
fi

# CONVERT DEBAYER ALIGN AND STACK CALIBRATED CFA FILES
	if [ "$debayer" = "SUPERPIXEL" ]; then
	echo " " >/dev/null 2>&1; else

	cd $processdir

	text=$(echo "Convert miff to tiff")
	
	echo "		Convert miff to tiff"
	(
	echo " "
	x=(0)
	for i in `ls -v *.miff`;do convert $i -depth $depth +compress $((x++))_$name.tiff;done
	rm -f *.miff
	) |
	yadProgress
	yadError
fi

# debayer light frames
	if [ "$debayer" = "SUPERPIXEL" ]; then
	echo " " >/dev/null 2>&1; else

	if [ "$raw" != "RAW" ] && [ "$raw" != "OTHER BAYER" ]; then
	echo " " >/dev/null 2>&1; else
	
	text=$(echo "DeBayer")	
	
	if [ "$debayer" != "MALVAR" ]; then
	dmdebayer=dmbilinear
	else
	dmdebayer=dmmalvar
	fi

	echo "		DeBayer"
	(
	echo ""
	x=(0)
	for i in `ls -v *.tiff`; do $source/$dmdebayer -p $matrix $i $((x++))_$name.tiff;done
	for i in `ls -v *.tiff`; do mogrify -alpha off $i;done
	) |
	yadProgress
	yadError
	fi
fi

# apply channel multipliers prior to image stack
	if [ "$multi" != "PRESTACK" ]; then
	echo " " >/dev/null 2>&1; else

	text=$(echo "Channel multipliers")

	echo "		Channel multipliers"
	(
	echo ""

	mogrify -color-matrix \
	"$Rr $Rg $Rb
	$Gr $Gg $Gb
	$Br $Bg $Bb" -alpha off *.tiff
	) |
	yadProgress
	yadError
fi

# launch hugin
	if [ "$interface" != "HUGIN" ]; then
	echo " " >/dev/null 2>&1; else
	if [ ! -x /usr/bin/hugin ]; then
	echo " " >/dev/null 2>&1; else
	/usr/bin/hugin
	fi
fi

# launch macrofusion
	if [ "$interface" != "MACROFUSION" ]; then
	echo " " >/dev/null 2>&1; else
	if [ ! -x /usr/bin/macrofusion ]; then
	echo " " >/dev/null 2>&1; else
	/usr/bin/macrofusion
	fi
fi

# rename Hugin or MacroFusion image stack
	if [[ -e "output.tif" ]]; then
	mv output.tif stack_$name.tif; else
	echo " " >/dev/null 2>&1
	fi

# system align and stack
	text=$(echo "Image Alignment")

	if [[ "$interface" = "HUGIN" || "$interface" = "MACROFUSION" ]]; then
	echo " " >/dev/null 2>&1; else

	echo "		Align images"
	(
	echo ""
	pto_gen -p 0 -f $hfov -o $name.pto *.tiff

	cpfind $CPOINT --ransacmode auto --ransaciter $ransac -o $name.pto $name.pto

	cpclean -o $name.pto $name.pto

	autooptimiser -a -m -s -o $name.pto $name.pto

	pano_modify -o $name.pto -p 0 --fov=auto --output-type=REMAPORIG,FUSEDSTACKS --output-exposure=0 --ldr-compression=NONE --ldr-file=TIF --blender=INTERNAL --canvas=AUTO --crop=AUTOHDR $name.pto

	nona -r ldr -p UINT16 -z NONE -m TIFF_m -o $name $name.pto
	) |
	yadProgress	
	yadError
fi
	rm $name.pto
	
# move debayered files

	createDirIfNeeded $debaydir
	
	mv -f *.tiff $debaydir

# mean stacking QRmin QRmax values
	if [ "$stack" != "MEAN"  ]; then
	echo " " >/dev/null 2>&1; else

# Select QRmin QRmax values for light frames
	values=($(yad --form --center --width=300 --window-icon=$wicon --title="$title - QRmin QRMax $name" --separator=' ' \
	--button=Skip:1 \
	--button=Apply:0 \
	--text="MEAN stack - Please select QRMin and QRMax parameters, if required?" \
	--field="QRMax":NUM \
		'0!0..5!0.000001!6' \
	--field="QRMin":NUM \
		'100!0..100!0.000001!6'))

	if [ $? -eq 0 ]; then
    	qrmin="${values[0]}"
    	qrmax="${values[1]}"
	fi
fi
	
# STACK IMAGES
	text=$(echo "Polynomial stack")

	if [ "$stack" = "POLY" ]; then
	echo "		Polynomial stack"
	(
	echo ""

# number of images in folder
	f=$(find . -maxdepth 1 -type f | wc -l)

# poly weight image set
	w=$(echo "scale=6; 1/$f" | bc)

# poly weight variables
	str0="$w,1,"
	str1="-$w,1,"
	str2="-$w,1"

# print $str0 $f times
	wstr=$(for i in $(seq 1 $f); do printf "$str0"; done)

# compute image set minimum and maximum
	convert *.tif \( -clone 0--1 -evaluate-sequence Min +write min.tiff +delete \) -evaluate-sequence Max max.tiff

	convert *.tif min.tiff max.tiff -auto-level -poly ""$wstr""$str1""$str2"" +compress -alpha off stack_$name.tif

	rm min.tiff max.tiff
	) |
	yadProgress
	yadError

	else
	
	text=$(echo "Mean - average stack")
	
	if [ "$stack" = "MEAN" ]; then
	echo "		Mean stack"
	(
	echo ""
	meanStack
	) |
	yadProgress
	yadError
	
	else

	text=$(echo "Median Stack")
	
	if [ "$stack" = "MEDIAN" ]; then
	echo "		Median stack"
	(
	echo ""
	convert *.tif -depth $depth -evaluate-sequence median stack_$name.tif >/dev/null 2>&1
	meanStack
	) |
	yadProgress
	yadError
	
	else
		
	text=$(echo "Exposure fusion stack")
	
	if [ "$stack" = "ENFUSE" ]; then
	echo "		Exposure fusion stack"
	(
	echo ""
	enfuse *.tif -m $cache -l auto -d 16 --exposure-weight=0 $MASK -o stack_$name.tif
	meanStack
	) |
	yadProgress	
	yadError
			fi
		fi
	fi
fi

# apply channel multipliers after image stacking		 
	if [ "$multi" != "POSTSTACK" ]; then
	echo " " >/dev/null 2>&1; else

	text=$(echo "Channel multipliers")

	echo "		Channel multipliers"
	(
	echo ""

	mogrify -color-matrix \
	"$Rr $Rg $Rb
	$Gr $Gg $Gb
	$Br $Bg $Bb" -alpha off stack_$name.tif
	) |
	yadProgress
	yadError
fi

# mean shift noise reduction
	if [ "$radius" = 0.000000 ] && [ "$amount" = 0.000000 ]; then
	echo " " >/dev/null 2>&1; else

	if [[ "$radius" != 0.000000 || "$amount" != 0.000000 ]] && [ "$flat" = "TRUE" ]; then

# Select noise reduction parameters for light frames
	values=`yad --form --center --width=300 --window-icon=$wicon --title="$title - Noise reduction warning $name" --separator=' ' \
	--button=Skip:1 \
	--button=Apply:0 \
	--text="Noise reduction is selected and has been applied to your flat frames.
Please select the noise reduction parameters for your light frames?" \
	--field="Noise - radius":NUM \
		'0!0..30!1!0' \
	--field="Noise - amount":NUM \
		'0!0..5!0.01!2'`

	if [ $? -eq 0 ]; then
    	radius="${values[0]}"
    	amount="${values[1]}"
	fi

	text=$(echo "Noise reduction")

	echo "		Noise reduction"
	(
	echo ""

convert stack_$name.tif -depth $depth -colorspace YCbCR -mean-shift "$radius"x"$radius"+"$amount"% -colorspace sRGB +compress stack_$name.tif

	) |
	yadProgress
	yadError
	fi
fi

# develop

	if [ "$develop" != "TRUE" ]; then
	echo " " >/dev/null 2>&1; else

	text=$(echo "Develop")
	(
	echo "		Develop"

	convert stack_$name.tif -depth $depth -channel all -normalize +channel +normalize +compress -alpha off 3.miff

	$autow 3.miff 4.miff

	$cbalance -c blue -a 15 4.miff 5.miff

	$curves "25,75" 5.miff 6.miff

	convert 6.miff \( -clone 0 -depth $depth -colorspace LAB -separate -channel L -negate +write mask.miff +delete \) \
	-depth $depth -alpha off -colorspace Gray L.miff

	convert 6.miff -mask mask.miff -gamma 3.0 7.miff

	convert 7.miff -depth $depth -separate +channel %d.miff

	convert 0.miff 1.miff 2.miff L.miff -depth $depth -combine -colorspace sRGB -modulate 100,100,100 -sharpen 0.0x0.75 -normalize +compress -alpha off stack_devel_$name.tif

	rm -f *.miff
	) |
	yadProgress
	yadError
fi

	if [ ! -e "stack_devel_$name.tif" ]; then
	echo " " >/dev/null 2>&1; else
	display -resize 25% stack_devel_$name.tif
	fi

# display stack result
	if [ ! -e "stack_$name.tif" ]; then
	echo " " >/dev/null 2>&1; else
	echo "		Display stack result"
	display -resize 25% -verbose -alpha off stack_$name.tif
	fi

yad --question --width=300 --window-icon=$wicon --title="$title - Stack $name" --text="Stack result OK" --button=No:1 --button=Yes:0 2>/dev/null

	if [ $? = 0 ]; then
	mv -f stack_*.tif $directory
	echo " " >/dev/null 2>&1; else

	yad --info --center \
	--title="$title - Stack $name" \
	--text="If no image displayed or the image is misaligned please return to Asterism and launch PMStack

As a rule Asterism will align a normally dithered image stack. However, images excessively displaced or rotated from the general orientation should be removed using 'Inspect' or, manually aligned using Hugin.

Note: Manual aligment of excessively displaced or rotated images may reduce cropping area and spoil the composition

The process may be rerun from 'Lights' - choose 'Hugin' from the 'Interface' drop down menu. Hugin may be launched independently, however, this will require the user to manage file locations and, unless stacking is performed in Hugin, use PMStack - 'Stack only'.

It is recommended to remove the previously aligned images from the 'debayer_name/align_name' folder in the project (output) directory and copy the Hugin aligned images to the same folder. When PMStack is launched and 'Stack only' is selected, the Hugin aligned images become the target files. 

Noise and other unusual artefacts should be addressed by ensuring the quality and correct application of image and calibration frames" \
	--width=500 \
	--window-icon=$wicon \
	--button=OK 2>/dev/null

# save old stack output
	if [[ ! -e "stack_$name.tif" ]]; then
	echo " " >/dev/null 2>&1; else
	mv stack_$name.tif $directory
	zip $directory/old_stack_$name.zip $directory/stack_$name.tif
	rm stack_$name.tif
	fi
fi

	cd $directory

# convert to output format
	if [ "$format" = "tif" ]; then
	echo " " >/dev/null 2>&1; else
	
	if [ ! -e "stack_$name.tif" ]; then
	echo " " >/dev/null 2>&1; else
	echo "		Convert to output format"
	convert stack_$name.tif -depth $depth +compress -alpha off $directory/stack_$name.$format
	fi

	if [ ! -e "stack_devel_$name.tif" ]; then
	echo " " >/dev/null 2>&1; else
	echo "		Convert to output format"
	convert stack_devel_$name.tif -depth $depth +compress -alpha off $directory/stack_devel_$name.$format	
	fi
fi

	if [[ ! -e stack_mean_$name.tif ]]; then
	echo " " >/dev/null 2>&1; else
	echo "		Convert to output format"
	convert stack_mean_$name.tif -depth $depth +compress -alpha off stack_mean_$name.$format
	fi

# write image directory to file

	echo "		Write image directory to log_$name"

	sed "s|$|$directory|" $log | tee $logname
	
# copy image extract luminance - combine with integrated image - delete copy
yad --question --width=300 --window-icon=$wicon --title="$title - Create LRGB L* $name" --text="Create LRGB frames and L* mask" --button=No:1 --button=Yes:0 2>/dev/null

	if [ $? = 1 ]; then
	echo " " >/dev/null 2>&1; else
	createDirIfNeeded $llrgbdir

	text=$(echo "Create LRGB frames and L* mask")

	echo "		Create LRGB frames and L* mask"	
	(
	echo ""

	cd $llrgbdir

	convert $directory/stack_$name.tif -depth $depth +compress -separate +channel %d.miff

	convert 0.miff -depth $depth R_$name.$format
	convert 1.miff -depth $depth G_$name.$format
	convert 2.miff -depth $depth B_$name.$format

	convert $directory/stack_$name.tif \( -clone 0 -depth $depth -colorspace LAB -separate -channel L +write Lab.miff +delete \) \
	-depth $depth -alpha off -colorspace Gray Lrgb.miff

	convert Lrgb.miff -depth $depth L_$name.$format

	convert Lab.miff -depth $depth MASK_$name.$format

	rm -f *.miff
	) |
	yadProgress	
	yadError
fi

	text=$(echo "Cleaning up - removing temporary files and folders")

	echo "Cleaning up - removing temporary files and folders"
	(
	echo ""
	) |
yad --progress --center \
  	--title="$title - $name" \
	--progress-text="$text" \
	--window-icon=$wicon \
	--width=300 \
	--pulsate \
	--no-buttons \
  	--timeout=1 2>/dev/null

	cleanUp

	killAll

	cd $source

	if [ ! -x /usr/local/bin/asterism ]; then
	bash -x ./asterism; else
	/usr/local/bin/asterism
	fi
exit
